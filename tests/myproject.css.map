{"version":3,"sources":["myproject.less","../lib/granola.less","../lib/ui/base/type.less","../lib/elements/default.less","../lib/ui/base/nav.less","../lib/core/mixins.less","../lib/ui/base/panels.less"],"names":[],"mappings":";AA6BA;EAKI,OAAO,IAAP;;ACfK;EACO,OAAO,IAAI,mBAAX;;;ACnBf,CAAE;AAAF,CAAE,ICgCO,CAAI;ED/BZ,oBAAA;;;;ACCM,CAAC,CAAI;ECFT,cAAA;;ADKI,CAAC,CAAI,GAAI;EHuDJ,WAAA;EACA,oBAAA;EAIJ,WAAA;;AGzDD,CAAC,CAAI,GAAI;ECDb,WAAA;;ADII,CAAC,CAAI,GAAI;ECDb,cAAA;;ADII,CAAC,CAAI;ECDT,cAAA;EACA,mBAAA;EACA,WAAA;;ADEI,CAAC,CAAI;ECCT,mBAAA;;ACNQ;AAAmB;EFSnB,qBAAA;;;;;;;AAKP,CAAC,CAAI;EG1BT,mBAAA;EACA,kBAAA;EACA,kBAAA;EACA,iBAAA;;AACA,QAA0B;EAGzB,CHmBI,CAAI;IGrBR,gBAAA","sourcesContent":["@granola: \"../lib\";\n@plugin \"inline-urls\";\n@import \"@{granola}/granola\";\n@import \"@{granola}/elements/default\";\n@import \"@{granola}/ui/base\";\n\n& {\n    @plugin \"../lib/granola\";\n    @set {\n        options {\n            ui: default;\n            elements: default;\n            theme: default;\n            \n            sections {\n                all: true;\n            }\n        }\n        colors {\n        \tbaseColor: val(#aaaaaa);\n        \tcolor: #fff;\n        }\n        borders {\n        \tscale: val(5.5);\n        \tbase: val(3px);\n        }\n    }\n    \n}\n.test {\n    @plugin \"../lib/granola\";\n    @define colors {\n        color: #888;\n    }\n    color: get('colors.color');\n}\n\n//@granola start;\n//get('borders.scale');\n.box {\n    //color: fadeout(get('colors.baseColor'), 50%);\n}\n\n\n// Below: you don't have to output elements, \n// you can just use Granola mixins to sprinkle styles throughout your project.\n// This would give you a set of \"starter classes\", depending on your .make() settings\n\n\n// Variable overrides, done LIKE A BOSS\n#granola { \n    // Override simple variables\n    #vars {\n        @colors__baseColor: #aaaaaa;\n        @borders__scale: 5.5;\n        @borders__base: 3px; \n    }\n    #ui {\n\t    .nav {\n\t        // Override ruleset definitions\n\t        @nav-list: { \n\t            border: all;\n\t            properties: & values; \n\t        }; \n\t    }\n\t    .nav(nav-list) {\n\t        or: add-one; \n\t    }\n    }\n}\n\n// Some different ways to start your project\n#granola.make(@defaults: false); // all normal parameters\n// #granola.make(@defaults: false, @all: false, @nav: true); // only nav\n\n\n","\r/*test*/\r@import \"core/init\";\r@import \"core/defaults\";\r@import \"core/mixins\";\r\r#granola {\r    .make(@defaults: true,\r        @all: true,\r        @type: false,\r        @layout: false,\r        @forms: false, \r        @nav: false, \r        @buttons: false, \r        @icons: false,\r        @tables: false,\r        @panels: false) {\r    \r    \t& {\r        \t.box {\r                value: get('options.elements');\r            }\r\t    \t#granola();\r\t    \t#vars();\r\t    \t#granola._make(@defaults, @all, @type, @layout, @forms, @nav, @buttons, @icons, @tables, @panels);\r    \t}\r    }\r    ._make(@defaults, @all, @type, @layout, @forms, @nav, @buttons, @icons, @tables, @panels) {\r        \r        & when(@defaults) {\r        \t.render.defaults();\r        }\r        & when (@all), (@type) {\r            .render.type();\r        }\r        & when (@all), (@layout) {\r            .render.layout();\r        }\r        & when (@all), (@nav) {\r            .render.nav();\r        }\r        & when (@all), (@buttons) {\r            .render.buttons();\r        }\r        & when (@all), (@forms) {\r            .render.forms();\r        }\r        & when (@all), (@icons) {\r            .render.icons();\r        }\r        & when (@all), (@tables) {\r            .render.tables();\r        }\r        & when (@all), (@panels) {\r            .render.panels();\r        }\r    }\r    .render {\r        .layout() { /* #granola.layout(); */ }\r        .type() { /* #granola.type(); */ }\r        .nav() { /* #granola.nav(); */ }\r        .buttons() { /* #granola.buttons(); */ }\r        .forms() { /* #granola.forms(); */ }\r        .icons() { /* #granola.icons(); */ }\r        .tables() { /* #granola.tables(); */ }\r        .panels() { /* #granola.panels(); */ }\r    }\r}\r\r// @elements: get('options.elements');\r// @import \"elements/@{elements}\";","@h1: {\n\t* + & {\n\t\tmargin-top: @layout__spacing * 2; \n\t}\n};","#granola() { .render { \n    .nav() {\n    \t#ui.nav();\n        .@{g}nav {\n            #ui.nav(nav-outer);\n        }\n        .@{g}nav ul {\n        \t#ui.nav(nav-list);\n        }\n        .@{g}nav li {\n        \t#ui.nav(nav-list-item);\n        }\n        .@{g}nav a {\n            #ui.nav(nav-list-link);\n        }\n        .@{g}nav-justify {\n        \t#ui.nav(nav-justify);\n        }\n        .@{g}nav-justify-item {\n        \t#ui.nav(nav-justify-item);\n        }\n        .prefix(\"btn-\", {\n            display: inline-block;\n        });\n    }\n    .panels() {\n    \t#ui.panels();\n    \t.@{g}page {\n    \t\t#ui.panels(page);\n    \t}\n    }\n    .type() {\n    \t#ui.type();\n    \th1, .@{g}h1 {\n    \t\t#ui.type(h1);\n    \t}\n    \t\t\n    }\n\t\n}}\n","@nav-outer: {\n    display: block;\n    .ui.border(1px, solid, @colors__baseColor);\n};\n@nav-list: {\n    display: block;\n};\n@nav-list-item: { \n    float: left;\n};\n@nav-list-link: { \n    display: block;\n};\n@nav-justify: {\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n};\n@nav-justify-item: {\n    display: table-cell;\n};\n    \n","#granola {\n    // Mixins to help with UI rendering\n    .ui {\n        // Draw a border based on math!\n        .border(@width, @style, @color) {\n            //border: ceil(@width*get('borders.scale')+(get('borders.base') - 1)) @style @color;\n        }\n    }\n    \n    // Helper mixins to create selector rules\n    //.selector {\n        // Apply rules to a class selector prefix\n        .prefix(@pre, @rules) {\n            [class^=\"@{pre}\"], [class*=\" @{pre}\"] {\n                @rules();\n            } \n        }\n    //}\n    // Mixins to help convert a static site into a responsive one\n    .responsive {\n        // Apply to something like static nav to make the items flexible\n        .table(@num-elements: false, @width: 100%) {\n            display: table;\n            width: @width;\n            margin: 0 auto;\n            table-layout: fixed;\n            & > * {\n                display: table-cell;\n                vertical-align: middle;\n            }\n        }\n        .table(@outer-selector, @num-elements: false, @width: 100%) {\n            @{outer-selector} {\n                .table(@num-elements: @num-elements, @width: @width);\n            }\n        }\n        .table(@breakpoint, @outer-selector, @num-elements: false, @width: 100%) {\n            @{outer-selector} {\n                @media only screen and (max-width: @breakpoint) {\n                    .table(@num-elements: @num-elements, @width: @width);\n                }\n            }\n        }\n    }\n}","@page: {\n\tpadding-right: @layout__spacing;\n\tpadding-left: @layout__spacing;\n\tmargin-right: auto;\n\tmargin-left: auto;\n\t@media (min-width: 700px) {\n\t\tmax-width: 750px;\n\t}\n};"]}